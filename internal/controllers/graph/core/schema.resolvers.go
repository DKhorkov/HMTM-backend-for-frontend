package graphqlcore

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strconv"

	"github.com/DKhorkov/hmtm-bff/internal/controllers/graph/schemas"
	"github.com/DKhorkov/hmtm-bff/internal/entities"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input schemas.RegisterUser) (int, error) {
	userData := entities.RegisterUserDTO{
		Credentials: entities.LoginUserDTO{
			Email:    input.Credentials.Email,
			Password: input.Credentials.Password,
		},
	}

	return r.UseCases.RegisterUser(userData)
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input *schemas.LoginUser) (string, error) {
	userData := entities.LoginUserDTO{
		Email:    input.Email,
		Password: input.Password,
	}

	return r.UseCases.LoginUser(userData)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*entities.User, error) {
	return r.UseCases.GetAllUsers()
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*entities.User, error) {
	userId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	return r.UseCases.GetUserByID(userId)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
